pub fn o<T: ToOwned + ?Sized>(x: &T) -> T::Owned {
    x.to_owned()
}

#[macro_export]
macro_rules! function_name {
    () => {{
        fn f() {}
        fn type_name_of<T>(_: T) -> &'static str {
            std::any::type_name::<T>()
        }
        let name = type_name_of(f);
        let name = name.strip_suffix("::f").unwrap();
        name.strip_suffix("::{{closure}}").unwrap_or(name)
    }};
}

#[macro_export]
macro_rules! declare_codegen {
    () => {
        g!("//! Auto generated by `{}`", $crate::function_name!());
        g!();
    };
}
